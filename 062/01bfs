https://leetcode.cn/problems/minimum-obstacle-removal-to-reach-corner/

//distance弹出距离最小的点，对每个邻接点，如果距离更小，则放入双端队列，0在前，1在后，确保距离近的在前面；

class Solution {
public:
    int minimumObstacles(vector<vector<int>>& grid) {
        int move[] = { -1, 0, 1, 0, -1 };
    int m = grid.size();
    int n = grid[0].size();
    vector<vector<int>> distance(m, vector<int>(n, INT_MAX));

    deque<pair<int, int>> deque;
    deque.push_front({0, 0});
    distance[0][0] = 0;

    while (!deque.empty()) {
        auto [x, y] = deque.front();
        deque.pop_front();

        if (x == m - 1 && y == n - 1) {
            return distance[x][y];
        }

        for (int i = 0; i < 4; i++) {
            int nx = x + move[i], ny = y + move[i + 1];
            if (nx >= 0 && nx < m && ny >= 0 && ny < n &&
                distance[x][y] + grid[nx][ny] < distance[nx][ny]) {
                distance[nx][ny] = distance[x][y] + grid[nx][ny];
                if (grid[nx][ny] == 0) {
                    deque.push_front({nx, ny});
                } else {
                    deque.push_back({nx, ny});
                }
            }
        }
    }

    return -1;
    }
};
