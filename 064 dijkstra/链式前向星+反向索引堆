https://leetcode.cn/problems/network-delay-time

//自己瞎写的
typedef pair<int, int> pii;
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int e = times.size();
        vector<vector<int>> graph(n + 1, vector<int>(n + 1, 1022));
        for (int i = 0; i < e; i++) {
            int x = times[i][0], y = times[i][1];
            graph[x][y] = times[i][2];
        }
        vector<vector<int>> distance(n + 1, vector<int>(n + 1));
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++) {
                distance[i][j] = graph[i][j];
                if (i == j)
                    distance[i][j] = 0;
            }

        priority_queue<pii, vector<pii>, greater<pii>> heap;
        heap.push({distance[k][k], k * n + k});
        vector<int> visit(n + 1, 0);
        visit[k] = 1;

        while (1) {
            int min=1022;int tmp;
            for (int i = 1; i <= n; i++) {
               
                
                if (!visit[i]) {
                    if (min > distance[k][i]) {
                        min=distance[k][i];
                        tmp=i;
                    }
                }
            }
            if(min==1022)break;

            visit[tmp] = 1;
            for (int i = 1; i <= n; i++) {
                if (graph[tmp][i] != 1022 && !visit[i]) {

                    if (distance[tmp][i] + distance[k][tmp] < distance[k][i])
                        distance[k][i] = distance[tmp][i] + distance[k][tmp];
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {

            if (distance[k][i] > ans)
                ans = distance[k][i];
        }
        if (ans != 1022)
            return ans;
        else
            return -1;
    }
};

//真正的
const int MAXN = 102;
const int MAXM = 6001;

int head[MAXN];
int nex[MAXM];
int to[MAXM];
int weight[MAXM];
int cnt;

int dist[MAXN];
int where[MAXN];
int heap[MAXN];
int heapsize;

class Solution {
public:
    void build(int n)
    {
        cnt=1;
        heapsize=0;
        memset(head,0,sizeof(head));
        fill(where,where+n+1,-1);
        fill(dist,dist+n+1,INT_MAX);
    }

    void addedge(int v,int u,int w)
    {
        nex[cnt]=head[v];
        to[cnt]=u;
        weight[cnt]=w;
        head[v]=cnt++;
    }

    void change(int v,int c)
    {
        if(where[v]==-1)
        {
            dist[v]=c;
            where[v]=heapsize;
            heap[heapsize++]=v;
            heapinsert(where[v]);
        }
        else if
        (where[v]>=0) {dist[v]=min(c,dist[v]);
        heapinsert(where[v]);}
    }

    void heapinsert(int i)
    {
        while(dist[heap[i]]<dist[heap[(i-1)/2]])
        {
            swap(heap[i],heap[(i-1)/2]);
            where[heap[i]]=i;
            where[heap[(i-1)/2]]=(i-1)/2;
            i=(i-1)/2;
        }
    }

    int heappop()
    {
        int ans=heap[0];
        swap(heap[0],heap[--heapsize]);
        where[heap[0]]=0;
        where[ans]=-2;
        heapify(0);
        return ans;
    }

    void heapify(int i)
    {
        int tmp=heap[i];
        int parent,child;
        for(parent=0;parent*2+1<heapsize;parent=child)
        {
            child=parent*2+1;
            child=(child+1<heapsize&&dist[heap[child]]>dist[heap[child+1]])?child+1:child;
            if(dist[heap[child]]>dist[tmp]) break;
            swap(heap[child],heap[parent]);
            where[heap[parent]]=parent;
            where[heap[child]]=child;
        }
    }

    bool isempty()
    {
        return heapsize==0;
    }


    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        build(n);
        for(auto&edge:times)
        addedge(edge[0],edge[1],edge[2]);
        change(k,0);
        while(!isempty())
        {
            int cur=heappop();
            for(int e=head[cur];e>0;e=nex[e])
            {
               int v=  to[e];
               int w=weight[e];
               change(v,w+dist[cur]);
            }
        }
        int ans=0;
        for(int i=1;i<=n;i++)
        {
            if(dist[i]>ans)
            {
                ans=dist[i];
            }
        }
        if(ans==INT_MAX)return -1;
        else return ans;
    }
};
