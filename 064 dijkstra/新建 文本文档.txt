https://leetcode.cn/problems/network-delay-time


typedef pair<int, int> pii;
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        int e = times.size();
        vector<vector<int>> graph(n + 1, vector<int>(n + 1, 1022));
        for (int i = 0; i < e; i++) {
            int x = times[i][0], y = times[i][1];
            graph[x][y] = times[i][2];
        }
        vector<vector<int>> distance(n + 1, vector<int>(n + 1));
        for (int i = 1; i <= n; i++)
            for (int j = 1; j <= n; j++) {
                distance[i][j] = graph[i][j];
                if (i == j)
                    distance[i][j] = 0;
            }

        priority_queue<pii, vector<pii>, greater<pii>> heap;
        heap.push({distance[k][k], k * n + k});
        vector<int> visit(n + 1, 0);
        visit[k] = 1;

        while (1) {
            int min=1022;int tmp;
            for (int i = 1; i <= n; i++) {
               
                
                if (!visit[i]) {
                    if (min > distance[k][i]) {
                        min=distance[k][i];
                        tmp=i;
                    }
                }
            }
            if(min==1022)break;

            visit[tmp] = 1;
            for (int i = 1; i <= n; i++) {
                if (graph[tmp][i] != 1022 && !visit[i]) {

                    if (distance[tmp][i] + distance[k][tmp] < distance[k][i])
                        distance[k][i] = distance[tmp][i] + distance[k][tmp];
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= n; i++) {

            if (distance[k][i] > ans)
                ans = distance[k][i];
        }
        if (ans != 1022)
            return ans;
        else
            return -1;
    }
};