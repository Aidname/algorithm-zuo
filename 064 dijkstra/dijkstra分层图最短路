 https://leetcode.cn/problems/DFPeFJ/

class Solution {
public:
    int electricCarPlan(vector<vector<int>>& paths, int cnt, int start, int end, vector<int>& charge) {
        int n=charge.size();
        vector<vector<int >>dist(n,vector<int>(cnt+1,INT_MAX));
        dist[start][0]=0;

        vector<vector<pair<int,int>>>adj(n);
        for(auto&path:paths)
        {
            int u=path[0],v=path[1],w=path[2];
            adj[u].emplace_back(v,w);
            adj[v].emplace_back(u,w);
        }
        priority_queue<tuple<int,int ,int>,vector<tuple<int,int,int>>,greater<>>pq;
        pq.emplace(0,start,0);//1时间2城市3电力

        while(!pq.empty())
        {
            auto[t,u,c]=pq.top();//不知道什么是auto
            pq.pop();
            if(t>dist[u][c])continue;//因为堆里面是没有实时更新的，而dist有，所以堆>dist,说明遍历过
            if(u==end)return t;//剪枝，如果已经是终点，就返回答案，堆相当于一个炉子，只需要把所有的情况放进去，会自动排出最优的情况；
            if(c<cnt)//如果可以充电
            {
                if(t+charge[u]<dist[u][c+1])
                {
                    dist[u][c+1]=t+charge[u];
                    pq.emplace(dist[u][c+1],u,c+1);
                }
            }
            for(auto[v,w]:adj[u])//如果没充电，去下一个城市；
            {
                if(c>=w&&t+w<dist[v][c-w])
                {
                    dist[v][c-w]=t+w;
                    pq.emplace(t+w,v,c-w);
                }
            }
        }
        return -1;
    }
};


 https://www.luogu.com.cn/problem/P4568
#include<bits/stdc++.h>
using namespace std;

int n, m, k, s, t;
int build()
{
  	int a, b, c;
  	vector<vector<int>>dist(n, vector<int>(k + 1, INT_MAX));
	  priority_queue<vector<int>, vector<vector<int>>, greater<>>heap;
  	vector < vector<pair<int, int>>>graph(n);

	for (int k = 0; k < m; k++)
	{
	 	cin >> a >> b >> c;
		 graph[a].emplace_back(b, c);
	 	graph[b].emplace_back(a, c);
	}
	heap.push({ 0,s,0 });
	dist[s][0] = 0;

	while (!heap.empty())
	{
	   	vector <int>cur = heap.top();
	   	heap.pop();
   		int v = cur[1], cnt = cur[2], d = cur[0];
	   	if (d > dist[v][cnt])continue;
	   	if (v == t)return d;

		   for (auto& u : graph[v])
	   	{
		      	int nc = u.first, nw = u.second;
			      if (cnt<k && dist[nc][cnt + 1]>d)
		     	{
			     	dist[nc][cnt + 1] = d;
			 	    heap.push({ d,nc,cnt + 1 });
		      }
		        if (dist[nc][cnt] > d + nw)
			      {
			      	dist[nc][cnt] = d + nw;
			       	heap.push({ d + nw,nc,cnt });
		       }
	   	}
	}
 	return -1;
}
int main()
{
	  cin >> n >> m >> k >> s >> t;
   cout<<	build();
}
