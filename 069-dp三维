https://leetcode.cn/problems/ones-and-zeroes/
class Solution {
public:
    int yi,lin;
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<vector<int>>dp(m+1,vector<int>(n+1,0));
        for(string s:strs)
        {
            f(s);
            for(int i=m;i>=lin;i--)
                for(int j=n;j>=yi;j--)    
                    dp[i][j]=max(dp[i][j],1+dp[i-lin][j-yi]);
        }
        return dp[m][n];
    }
    void f(string &s)
    {   yi=0;lin=0;   
        for(char a:s)
        {
            if(a=='1')yi++;
            else lin++;
        }
    }
};

https://leetcode.cn/problems/profitable-schemes/
const int mod=1e9+7;
class Solution {
public:
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        int m=group.size();
        vector<vector<long>>dp(n+1,vector<long>(minProfit+1,0));
        for(int i=0;i<=n;i++)dp[i][0]=1;


        for(int i=m-1;i>=0;i--)
        {
            for(int j=n;j>=0;j--)
            {
                for(int k=minProfit;k>=0;k--)
                {
                        int tmp=j-group[i];
                        int mon=max(k-profit[i],0);
                        if(tmp>=0)
                        dp[j][k]=(dp[j][k]+dp[tmp][mon])%mod;
                }
            }
        }
        return dp[n][minProfit];
    }
};

https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/description/
const int mod =1e9+7;
class Solution {
public:
    int numberOfPaths(vector<vector<int>>& grid, int k) {
        int m=grid.size(),n=grid[0].size();
       vector<vector<vector<long>>>dp(m,vector<vector<long>>(n,vector<long>(k,0)));
        dp[m-1][n-1][grid[m-1][n-1]%k]=1;
        for(int i=m-2;i>=0;i--)
        {
            for(int r=0;r<k;r++)
            {
                int need=(k+r-grid[i][n-1]%k)%k;
                dp[i][n-1][r]=dp[i+1][n-1][need];
            }
        }
        for(int j=n-2;j>=0;j--)
        {
            for(int r=0;r<k;r++)
            {
                 int need=(k+r-grid[m-1][j]%k)%k;
                 dp[m-1][j][r]=dp[m-1][j+1][need];
            }
        }
        for(int i=m-2;i>=0;i--)
        {
            for(int j=n-2;j>=0;j--)
             for(int r=0;r<k;r++)
            {
                int need=(k+r-grid[i][j]%k)%k;
                dp[i][j][r]=(dp[i+1][j][need]+dp[i][j+1][need])%mod;
            }
        }
        return dp[0][0][0];       
    }    
};
