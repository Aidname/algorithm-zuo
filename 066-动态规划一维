https://leetcode.cn/problems/minimum-cost-for-tickets/

class Solution {
public:
    int dur[3]={1,7,30};
    int dp[366];
    int mincostTickets(vector<int>& days, vector<int>& costs) {
        for(auto&v:dp)v=INT_MAX;
        int n=days.size();
        dp[n]=0;
        for(int i=n-1;i>=0;i--)
        {       
            for(int k=0,j=i;k<3;k++)
            {
                while(j<n&&days[j]<days[i]+dur[k])j++;
                dp[i]=min(dp[i],costs[k]+dp[j]);
            }     
        }
        return dp[0];
    }
};

 https://leetcode.cn/problems/decode-ways/
class Solution {
public:
    int numDecodings(string s) {        
       int n=s.length();
       int a,b=1,c;
       for(int i=n-1;i>=0;i--)
       {
            if(s[i]=='0')a=0;
            else 
            {
                a=b;
                if(i<n-1&&(s[i]-'0')*10+s[i+1]-'0'<=26)
                a+=c;
            }
            c=b;
            b=a;
       }
       return b;
    }
};

https://leetcode.cn/problems/ugly-number-ii/
const int MAX=1700;
class Solution {
public:
    int nthUglyNumber(int n) {
        vector<int>v(MAX);
        v[1]=1;
       
        int a=1,b=1,c=1;
        int i;
        for(i=1;i<=n-1;i++)
        {
            v[i+1]=min(v[a]*2,min(v[b]*3,v[c]*5));
            if(v[i+1]==v[a]*2)a++;
            if(v[i+1]==v[b]*3)b++;
            if(v[i+1]==v[c]*5)c++;
        }
        return v[i];
    }
};

https://leetcode.cn/problems/longest-valid-parentheses/
class Solution {
public:
    int longestValidParentheses(string s) {
        int n=s.size();
        int max=0;
        vector<int>dp(n,0);
        for(int i=1;i<n;i++)
        {        
            if(s[i]==')')
            {
                int p=i-dp[i-1]-1;
                if(p>=0&&s[p]=='(')               
                  dp[i]=dp[i-1]+2+(p-1>=0?dp[p-1]:0);
                if(max<dp[i])max=dp[i];
            }
        }
        return max;
    }
};

https://leetcode.cn/problems/unique-substrings-in-wraparound-string/
class Solution {
public:
    int findSubstringInWraproundString(string s) {
        vector<int>ans(26,0);
        int aa=0, n=s.size();
        vector<int>st(n);
        for(int i=0;i<n;i++)
        st[i]=s[i]-'a';   
            int len=1;
            ans[st[0]]=1;
            for(int j=1;j<n;j++)
            {  
                int pre=st[j-1],tmp=st[j];
               if(pre+1==tmp||(tmp==0&&pre==25))
               len++;
               else len=1;
               ans[tmp]=max(ans[tmp],len);
            }  
        for(int i=0;i<26;i++)
         aa+=ans[i];
         return aa;
    }
};
