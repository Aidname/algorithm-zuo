https://www.luogu.com.cn/problem/P1253
#include<bits/stdc++.h>
using namespace std;

const int MAXN = 1000009;
int  arr[MAXN];
long long ma[MAXN<<2];
long long add[MAXN<<2];
int change[MAXN<<2];
bool update[MAXN<<2];

void up(int i)
{
	ma[i] = max(ma[i << 1], ma[i << 1 | 1]);
}

void addlazy(int i, long long v)
{
	ma[i] += v;
	add[i] += v;
}

void updatelazy(int i,int v)
{
	ma[i] = v;
	add[i] = 0;
	change[i] = v;
	update[i] = true;
}

void down(int i)
{
	if (update[i])
	{
		updatelazy(i << 1, change[i]);
		updatelazy(i << 1 | 1, change[i]);
		update[i] = false;
	}
	if (add[i])
	{
		addlazy(i << 1, add[i]);
		addlazy(i << 1 | 1, add[i]);
		add[i] = 0;
	}
}

void build(int l, int r, int i)
{
	if (l == r)ma[i] = arr[l];
	else {
		int mid = l+((r - l) >> 1);
		build(l, mid, i << 1);
		build(mid + 1, r, i << 1 | 1);
		up(i);
	}
	add[i] = 0;
	change[i] = 0;
	update[i] = false;
}

void upda(int jl, int jr, int jv, int l, int r, int i)
{
	if (jl <= l && jr >= r)	updatelazy(i, jv);
	else
	{
		int mid = (l + r) >> 1;
		down(i);
		if (jl <= mid)upda(jl, jr, jv, l, mid, i << 1);
		if (jr > mid)upda(jl, jr, jv, mid + 1, r, i << 1 | 1);
		up(i);
	}
}

void ad(int jl, int jr, int jv, int l, int r, int i)
{
	if (jl <= l && jr >= r) addlazy(i, jv);
	else
	{
		int mid = (l + r) >> 1;
		down(i);
		if (jl <= mid)ad(jl, jr, jv, l, mid, i << 1);
		if (jr > mid)ad(jl, jr, jv, mid + 1, r, i << 1 | 1);
		up(i);
	}
}


long long query(int jl, int jr, int l, int r, int i)
{
	if (jl <= l && jr >= r)return ma[i];
	else
	{
		int mid = (l + r) >> 1;
		down(i);
		long long ans=LLONG_MIN;
		if (jl <= mid)ans = max(ans, query(jl, jr, l, mid, i << 1));
		if (jr > mid)ans = max(ans, query(jl, jr, mid + 1, r, i << 1 |1));
		return ans;
	}
}

int main()
{
	ios::sync_with_stdio(false);
	cin.tie(0);
	int n, p;
	cin >> n >> p;
	for (int i = 1; i <= n; i++)
		cin >> arr[i];
	
	build(1, n, 1);
	
	for (int i = 1,op,jl,jr,jv; i <= p; i++)
	{
		cin >> op;
		if (op == 1)
		{
			cin >> jl >> jr >> jv;
			upda(jl, jr, jv, 1, n, 1);
		}
		else if (op == 2)
		{
			cin >> jl >> jr >> jv;
			ad(jl, jr, jv, 1, n, 1);
		}
		else
		{
			cin >> jl >> jr;
			cout << query(jl, jr, 1, n, 1) << endl;
		}
	}
	return 0;
}
