这是一道交互题。（二分变形）

现在有一个长度为 n 的未知数组 a（下标从 1 开始），你只知道这个数组满足以下两个条件：
数组中的最小值只出现一次
除最小值外的其他值都出现两次且在数组中下标连续
现在你需要通过不超过100次的询问找到 a 数组中最小值所对应的下标。
每次询问由你给出一个下标 i(1≤i≤n)，交互系统会返回 a 
i
​
  的值。

输入格式
第一行输入一个整数 n (1≤n≤10 
6
 )，表示数组的长度为 n。

交互流程：
交互开始于你的程序用? i的格式发出询问 ，交互程序会返回一行一个整数表示 a 
i
​
  (1≤a 
i
​
 ≤10 
9
 ) 的值。

当你找到 a 数组最小值对应的下标pos时，请以! pos的格式输出，此操作不计入询问次数。

如果你发出了100次以上的查询或者答案不正确，你的代码将会被拒绝并立即停止交互。

 a 数组的值在交互开始之前就是固定的，与交互过程无关。



#include<bits/stdc++.h>
using namespace std;

int n;

bool ask(int x)
{
	int p1, p2;
	cout << "? " << x << endl;
	fflush(stdout);
	cin >> p1;
	cout << "? " << x+1 << endl;
	fflush(stdout);
	cin >> p2;
	if (p1 == p2)return true;
	else return false;
}

int main()
{
	cin >> n;
	int ans = 0;
	int l = 0, r = n / 2, mid, t;

	while (l <= r)
	{
		mid = (l + r) >> 1;
		t = 2 * mid + 1;
		if (ask(t))
		{
			l = mid + 1;

		}
		else
		{
			r = mid - 1;
			ans = t;
		}
	}
	cout << "! " << ans<< endl;
	fflush(stdout);
}



初春的细雨轻抚着校园，空气中弥漫着湿润的泥土芬芳。Legend_dy 与 Faoo 及双方好友组成的 k 人观影团来到了学校附近的影院。

现在有一排 n 个座位供大家选择，第 i 个座位的舒适度为 a 
i
​
 。座位的舒适度固然很重要但 Legend_dy 当然更想要和 Faoo 坐在一起！

请你为观影团安排座位，在保证至少有两个相邻座位的前提下使得舒适度之和最大。
#include<bits/stdc++.h>
using namespace std;

#define int long long 
struct s
{
	int a, b;
	
};

bool cmp(s x, s y)
{
	return x.a < y.a;
}




signed main()
{
	int n, m;
	cin >> n >> m;
	vector<s>arr(n+1);
	for (int i = 1; i <= n; i++)
	{
		cin >> arr[i].a;
		arr[i].b = i;
	}
	
	

	

	sort(arr.begin()+1, arr.end(), cmp);



	vector<int>pre(n + 1,0);
	for (int i = 1; i <= n; i++)
	{
		pre[i] = pre[i - 1] + arr[i].a;
	}



	vector<int>b(n + 1);
	for (int i = 1; i <= n; i++)
	{
		b[arr[i].b] = i;
	}

	int ans = -1e6 - 4;
	
	for (int i = 1; i < n; i++)
	{
		int p1 = b[i], p2 = b[i + 1];
		if (p1 > p2)swap(p1, p2);
		int sum = arr[p1].a + arr[p2].a;
		int p = n - m + 3;
		if (p <= p2)
		{
			p--;
			sum -= arr[p2].a;
		}
		if (p <= p1)
		{
			p--;
			sum -= arr[p1].a;
		}
		ans = max(ans,pre[n]-pre[p-1] + sum);//tip:应该是最后的结果去比较，而不是最大的连续两个
	}
	cout << ans;
	
	

}

//范例 6 3
//1 1 1 2 0 3
//如果先选最大的两个连续，那么会是1 2，或者 0 3；程序选0 3；
//排序完是0 1 1 1 2 3 ；
//导致ans是5，但是6



今天是 wcy 的生日，他想要收到一个排列 p 
1
​
 ,p 
2
​
 ,…,p 
n
​
  作为他的生日礼物。当然，并不是任何排列他都喜欢，他只喜欢和他生日日期有关的排列。
具体而言，wcy 希望收到一个长度为 n 的排列，满足 ∑ 
i=1
n
​
 p 
i
​
 ⋅i 恰好是 13 的倍数。你可以将这个排列送给他，或告诉他这个排列不存在吗？
† 排列是指一个长度为 n 的数组 p，满足 p 
i
​
 ∈[1,n] 且不存在两个元素相同。

输入格式
第一行一个正整数 T 表示测试用例的数量。
接下来 T 行，每行包含一个正整数 n，代表该测试用例询问的长度。

输出格式
对于每个测试用例，输出一行，包含 n 个正整数，表示你构造的方案——其中第 i 个数表示 p 
i
​
 。
若有多种符合题意的排列，输出任意一种。若不存在这样的排列，请输出 −1。

样例
样例输入1

1
2
样例输出1

-1
样例输入2

3
6
8
11
样例输出2

1 2 3 4 5 6
1 2 3 4 7 8 6 5
1 2 3 4 5 6 8 11 10 7 9


#include <bits/stdc++.h>  // 万能头文件，包含所有 STL
#define int long long     // 把 int 替换成 long long，防止乘法溢出

using namespace std;

constexpr int P = 13;     // 题目中的模数：我们要让加权和 mod 13 == 0

// 处理每组测试数据
void solve() {
    int n;
    cin >> n;

    // 如果 n ≤ 2，排列数量太少，无法满足要求，直接输出 -1
    if (n <= 2) {
        cout << "-1\n";
        return;
    }

    // a[1..n] 是我们要构造的排列，初始化长度为 n+1（下标从1开始）
    vector<int> a(n + 1);

    int now = 0;  // 当前排列的加权和 ∑ i * a[i]，我们只记录它模 13 的值

    // 对于位置 10 到 n，我们直接填入 i，对应的值也是 i
    // 这样我们只需要处理前 9 个位置，后面是固定的
    for (int i = 10; i <= n; i++) {
        a[i] = i;
        now = (now + i * i) % P;  // 因为位置=i，值=i，所以贡献是 i*i
    }

    int m = min(9ll, n);  // 前面需要暴力搜索的范围最多到位置 9（或 n 较小就到 n）

    vector<bool> vis(m + 1);  // vis[i] 记录前 m 个数字是否已经被用过（防止重复）
    bool flag = false;        // 找到合法解的标记

    // 使用 lambda 表达式写 DFS（也就是递归函数）
    auto dfs = [&](auto self, int k) -> void {
        // 递归到第 m+1 位，表示前 m 位已经填完
        if (k > m) {
            // 检查当前和是否是 13 的倍数
            if (now == 0) {
                flag = true;
            }
            return;
        }

        // 如果已经找到答案就不再递归，剪枝
        if (flag) return;

        // 枚举 1 到 m 中的所有数，尝试填到第 k 位
        for (int i = 1; i <= m; i++) {
            if (vis[i]) continue;  // 如果这个数已经用过，跳过

            vis[i] = true;         // 标记已使用
            a[k] = i;              // 把 i 放在第 k 位
            now = (now + k * i) % P;  // 更新加权和（mod 13）

            self(self, k + 1);     // 递归下一位

            if (flag) return;     // 如果已经找到合法解，剪枝

            // 回溯：恢复状态
            now = (now - (k * i % P) + P) % P; // 减去刚刚加的项，注意避免负数
            a[k] = 0;              // 清空第 k 位
            vis[i] = false;        // 标记 i 可再次使用
        }
    };

    dfs(dfs, 1);  // 从第 1 个位置开始 DFS 搜索合法的排列前缀

    // 输出构造出的答案（无论是否合法，这里 a 都已经填好了）
    for (int i = 1; i <= n; i++) {
        cout << a[i] << " \n"[i == n]; // 最后一项换行，其余空格
    }
}
signed main() {
    ios::sync_with_stdio(false); // 关闭 C 和 C++ 的混用同步，加快 cin 速度
    cin.tie(nullptr);            // 禁用 cin 和 cout 的绑定，加速输出

    int T = 1;
    cin >> T;

    // 多组测试数据，逐个处理
    while (T--) {
        solve();
    }

    return 0;
}

