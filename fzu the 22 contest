这是一道交互题。（二分变形）

现在有一个长度为 n 的未知数组 a（下标从 1 开始），你只知道这个数组满足以下两个条件：
数组中的最小值只出现一次
除最小值外的其他值都出现两次且在数组中下标连续
现在你需要通过不超过100次的询问找到 a 数组中最小值所对应的下标。
每次询问由你给出一个下标 i(1≤i≤n)，交互系统会返回 a 
i
​
  的值。

输入格式
第一行输入一个整数 n (1≤n≤10 
6
 )，表示数组的长度为 n。

交互流程：
交互开始于你的程序用? i的格式发出询问 ，交互程序会返回一行一个整数表示 a 
i
​
  (1≤a 
i
​
 ≤10 
9
 ) 的值。

当你找到 a 数组最小值对应的下标pos时，请以! pos的格式输出，此操作不计入询问次数。

如果你发出了100次以上的查询或者答案不正确，你的代码将会被拒绝并立即停止交互。

 a 数组的值在交互开始之前就是固定的，与交互过程无关。



#include<bits/stdc++.h>
using namespace std;

int n;

bool ask(int x)
{
	int p1, p2;
	cout << "? " << x << endl;
	fflush(stdout);
	cin >> p1;
	cout << "? " << x+1 << endl;
	fflush(stdout);
	cin >> p2;
	if (p1 == p2)return true;
	else return false;
}

int main()
{
	cin >> n;
	int ans = 0;
	int l = 0, r = n / 2, mid, t;

	while (l <= r)
	{
		mid = (l + r) >> 1;
		t = 2 * mid + 1;
		if (ask(t))
		{
			l = mid + 1;

		}
		else
		{
			r = mid - 1;
			ans = t;
		}
	}
	cout << "! " << ans<< endl;
	fflush(stdout);
}



初春的细雨轻抚着校园，空气中弥漫着湿润的泥土芬芳。Legend_dy 与 Faoo 及双方好友组成的 k 人观影团来到了学校附近的影院。

现在有一排 n 个座位供大家选择，第 i 个座位的舒适度为 a 
i
​
 。座位的舒适度固然很重要但 Legend_dy 当然更想要和 Faoo 坐在一起！

请你为观影团安排座位，在保证至少有两个相邻座位的前提下使得舒适度之和最大。
#include<bits/stdc++.h>
using namespace std;

#define int long long 
struct s
{
	int a, b;
	
};

bool cmp(s x, s y)
{
	return x.a < y.a;
}




signed main()
{
	int n, m;
	cin >> n >> m;
	vector<s>arr(n+1);
	for (int i = 1; i <= n; i++)
	{
		cin >> arr[i].a;
		arr[i].b = i;
	}
	
	

	

	sort(arr.begin()+1, arr.end(), cmp);



	vector<int>pre(n + 1,0);
	for (int i = 1; i <= n; i++)
	{
		pre[i] = pre[i - 1] + arr[i].a;
	}



	vector<int>b(n + 1);
	for (int i = 1; i <= n; i++)
	{
		b[arr[i].b] = i;
	}

	int ans = -1e6 - 4;
	
	for (int i = 1; i < n; i++)
	{
		int p1 = b[i], p2 = b[i + 1];
		if (p1 > p2)swap(p1, p2);
		int sum = arr[p1].a + arr[p2].a;
		int p = n - m + 3;
		if (p <= p2)
		{
			p--;
			sum -= arr[p2].a;
		}
		if (p <= p1)
		{
			p--;
			sum -= arr[p1].a;
		}
		ans = max(ans,pre[n]-pre[p-1] + sum);//tip:应该是最后的结果去比较，而不是最大的连续两个
	}
	cout << ans;
	
	

}

//范例 6 3
//1 1 1 2 0 3
//如果先选最大的两个连续，那么会是1 2，或者 0 3；程序选0 3；
//排序完是0 1 1 1 2 3 ；
//导致ans是5，但是6
